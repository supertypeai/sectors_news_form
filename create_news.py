import streamlit as st
from datetime import datetime as dt
import requests
import json

# data
api_key = st.secrets["API_KEY"]

available_subsectors = [
  "alternative-energy",
  "apparel-luxury-goods",
  "automobiles-components",
  "banks",
  "basic-materials",
  "consumer-services",
  "financing-service",
  "food-beverage",
  "food-staples-retailing",
  "heavy-constructions-civil-engineering",
  "healthcare-equipment-providers",
  "holding-investment-companies",
  "household-goods",
  "industrial-goods",
  "industrial-services",
  "insurance",
  "investment-service",
  "leisure-goods",
  "logistics-deliveries",
  "media-entertainment",
  "multi-sector-holdings",
  "nondurable-household-products",
  "oil-gas-coal",
  "pharmaceuticals-health-care-research",
  "properties-real-estate",
  "retailing",
  "software-it-services",
  "technology-hardware-equipment",
  "telecommunication",
  "tobacco",
  "transportation",
  "transportation-infrastructure",
  "utilities"
]


# helper functions
def format_option(option):
    return option.replace("-", " ").title()

def generate():
    if not st.session_state.source or not st.session_state.date or not st.session_state.time:
        st.toast("Please fill out the required fields.")
    else:
        data = {
            "source": st.session_state.source,
            "timestamp": dt.combine(st.session_state.date, st.session_state.time).strftime("%Y-%m-%d %H:%M:%S")
        }

        headers = {
            "Authorization": f"Bearer {api_key}"
        }

        response = requests.post("https://sectors-news-endpoint.fly.dev/url-article", headers = headers, json=data)
        if response.status_code == 200:
            autogenerated = response.json()
            st.session_state.title=autogenerated["title"]
            st.session_state.body=autogenerated["body"]
            st.session_state.source=autogenerated["source"]
            st.session_state.subsector=[option for option in autogenerated["sub_sector"] if option in available_subsectors]
            st.session_state.tags=', '.join(autogenerated["tags"])
            st.session_state.tickers=', '.join(autogenerated["tickers"])
            st.session_state.dimension = json.dumps(autogenerated["dimension"])
            st.session_state.view = "post"

        else:
            # Handle error
            st.error(f"Error: Something went wrong. Please try again.")

def post():
    if not st.session_state.source or not st.session_state.date or not st.session_state.time or not st.session_state.subsector or not st.session_state.tags or not st.session_state.tickers:
        st.toast("Please fill out the required fields.")
    else:
        # process form data
        tags_list = [tag.strip() for tag in st.session_state.tags.split(',') if tag.strip()]
        tickers_list = [ticker.strip() for ticker in st.session_state.tickers.split(',') if ticker.strip()]

        data = {
            "title": st.session_state.title,
            "body": st.session_state.body,
            "source": st.session_state.source,
            "timestamp": dt.combine(st.session_state.date, st.session_state.time).strftime("%Y-%m-%d %H:%M:%S"),
            "sub_sector": st.session_state.subsector,
            "tags": tags_list,
            "tickers": tickers_list,
            "dimension": json.loads(st.session_state.dimension)
        }

        headers = {
            "Authorization": f"Bearer {api_key}"
        }

        if st.session_state.edit != False:
            data["id"] = st.session_state.edit
            response = requests.patch("https://sectors-news-endpoint.fly.dev/articles", headers = headers, json=data)
        else:
            response = requests.post("https://sectors-news-endpoint.fly.dev/url-article/post", headers = headers, json=data)

        if response.status_code == 200:
            st.toast("News submitted successfully! ðŸŽ‰")
            st.session_state.title=""
            st.session_state.body=""
            st.session_state.source=""
            st.session_state.date=dt.today()
            st.session_state.time=dt.now()
            st.session_state.subsector=available_subsectors[0]
            st.session_state.tags=""
            st.session_state.tickers=""
            st.session_state.dimension=""
            st.session_state.view = 'link'
            st.session_state.edit = False
        elif response.status_code == 400:
            st.toast("Duplicated news. Please review the content.")
            dup = response.json()
            res_prev = requests.get(f"https://sectors-news-endpoint.fly.dev/articles?id={dup['id_duplicate']}", headers = headers)
            if res_prev.status_code == 200:
                prev = res_prev.json()[0]
                st.session_state.title=prev["title"]
                st.session_state.body=prev["body"]
                st.session_state.source=prev["source"]
                st.session_state.subsector=prev["sub_sector"]
                st.session_state.date=dt.strptime(prev["timestamp"], "%Y-%m-%dT%H:%M:%S").date()
                st.session_state.time=dt.strptime(prev["timestamp"], "%Y-%m-%dT%H:%M:%S").time()
                st.session_state.tags=', '.join(prev["tags"])
                st.session_state.tickers=', '.join(prev["tickers"])
                st.session_state.dimension = json.dumps(prev["dimension"])
                st.session_state.edit=dup["id_duplicate"]
        else:
            # Handle error
            st.error(f"Error: Something went wrong. Please try again.")

def back():
    st.session_state.view = "link"
    st.session_state.edit = False
  
# app
if 'view' not in st.session_state:
    st.session_state.view = 'link'

if 'edit' not in st.session_state:
    st.session_state.edit = False

st.title("Sectors News")

# link submission
if st.session_state.view == "link":
    links = st.form('link_submission')
    links.subheader("Add News")
    source = links.text_input("Source:red[*]", placeholder="Enter URL", key="source")
    date = links.date_input("Created Date (GMT+7):red[*]", max_value=dt.today(), format="YYYY-MM-DD", key="date")
    time = links.time_input("Created Time (GMT+7)*:red[*]", key="time", step=60)
    submit = links.form_submit_button("Submit", on_click=generate)


# user validation
elif st.session_state.view == "post":
    news = st.form('news')

    if st.session_state.edit != False:
        news.subheader("Edit Duplicated News")
    else:
        news.subheader("Add News")
    back_button = news.form_submit_button("< Back", on_click=back)
    news.caption(":red[*] _required_")
    title = news.text_input("Title", placeholder="Enter title", key="title")
    body = news.text_area("Body", placeholder="Enter body", key="body")
    source = news.text_input("Source:red[*]", placeholder="Enter URL", key="source")
    date = news.date_input("Created Date (GMT+7):red[*]", max_value=dt.today(), format="YYYY-MM-DD", key="date")
    time = news.time_input("Created Time (GMT+7)*:red[*]", key="time", step=60)
    subsector = news.multiselect("Subsector:red[*]", options = available_subsectors, format_func=format_option, key="subsector")
    tags = news.text_area("Tags:red[*]", placeholder="Enter tags seperated by commas, e.g. idx, market-cap", key="tags")
    tickers = news.text_area("Tickers:red[*]", placeholder="Enter tickers seperated by commas, e.g. BBCA.JK, BBRI.JK", key="tickers")
    dimension = news.text_area("Dimension:red[*]", placeholder="Enter dimension", key="dimension")
    submit2 = news.form_submit_button("Submit", on_click=post)